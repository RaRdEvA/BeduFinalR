#Paso 2 Calcular estadistico de prueba
media <-mean(valores)
ds <- sd(valores)
n <- length(valores)
t <- (media - hip)/(ds/sqrt(n))
gl <- n-1
#Paso 3: Calcular P value
pvalue <- qt(t,df = gl, lower.tail = T)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 0.005
valores <- match.data.csv.win$diferencia
#Paso 2 Calcular estadistico de prueba
media <-mean(valores)
ds <- sd(valores)
n <- length(valores)
t <- (media - hip)/(ds/sqrt(n))
gl <- n-1
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 0.000005
valores <- match.data.csv.win$diferencia
#Paso 2 Calcular estadistico de prueba
media <-mean(valores)
ds <- sd(valores)
n <- length(valores)
t <- (media - hip)/(ds/sqrt(n))
gl <- n-1
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 0.0000000000005
valores <- match.data.csv.win$diferencia
#Paso 2 Calcular estadistico de prueba
media <-mean(valores)
ds <- sd(valores)
n <- length(valores)
t <- (media - hip)/(ds/sqrt(n))
gl <- n-1
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 500000000
valores <- match.data.csv.win$diferencia
#Paso 2 Calcular estadistico de prueba
media <-mean(valores)
ds <- sd(valores)
n <- length(valores)
t <- (media - hip)/(ds/sqrt(n))
gl <- n-1
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
match.data.csv.win <- match.data.csv.win %>% mutate(trasladada = (diferencia+10)
match.data.csv.win <- match.data.csv.win %>% mutate(trasladada = (diferencia+10))
bin <- seq(min(match.data.csv.win$diferencia), max(match.data.csv.win$diferencia), length.out = 16)
ggplot(match.data.csv.win,aes(diferencia))+
geom_histogram(breaks=bin)+
theme(legend.position="left")+
labs(x = "goles", y = "Frecuencia")
bin <- seq(min(match.data.csv.win$trasladada), max(match.data.csv.win$trasladada), length.out = 16)
ggplot(match.data.csv.win,aes(trasladada))+
geom_histogram(breaks=bin)+
theme(legend.position="left")+
labs(x = "goles", y = "Frecuencia")
bin <- seq(min(match.data.csv.win$trasladada), max(match.data.csv.win$trasladada), length.out = 16)
match.data.csv.win <- match.data.csv.win %>% mutate(trasladada = (diferencia+10))
bin <- seq(min(match.data.csv.win$trasladada), max(match.data.csv.win$trasladada), length.out = 16)
ggplot(match.data.csv.win,aes(trasladada))+
geom_histogram(breaks=bin)+
theme(legend.position="left")+
labs(x = "goles", y = "Frecuencia")
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 500000000
valores <- match.data.csv.win$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 15
valores <- match.data.csv.win$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
bin <- seq(min(match.data.csv.win$diferencia), max(match.data.csv.win$diferencia), length.out = 16)
ggplot(match.data.csv.win,aes(diferencia))+
geom_histogram(breaks=bin)+
theme(legend.position="left")+
labs(x = "goles", y = "Frecuencia")
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 0
valores <- match.data.csv.win$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
#Paso 3: Calcular P value
pvalue <- 2*pt(t,df = gl, lower.tail = F)
pvalue
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
places <- which(Ym[15]==format(scores$date, "%Y-%m"))
places
eval <- match.data.csv.win[places]
eval <- match.data.csv.win$places
eval <- match.data.csv.win
eval <- match.data.csv.win[places,]
View(eval)
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 0
valores <- eval
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
valores <- eval
View(match.data.csv.win)
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
pvalue
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- -1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- -5
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
mean(match.data.csv.win$diferencia)
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 0.455
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 0
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- -3
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- -1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el partido lo van a empatar
# h1 el partido no lo van a empatar
hip <- 1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el local ganara por diferencia de 1 gol
# h1 el local no ganara por diferencia de 1 gol
hip <- 1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
places
places <- which(Ym[40]==format(scores$date, "%Y-%m"))
places
eval <- match.data.csv.win[places,]
bin <- seq(min(match.data.csv.win$diferencia), max(match.data.csv.win$diferencia), length.out = 16)
Ym[40]
places <- which(Ym[400]==format(scores$date, "%Y-%m"))
Ym[400]
Ym[300]
Ym[100]
places <- which(Ym[100]==format(scores$date, "%Y-%m"))
places
eval <- match.data.csv.win[places,]
bin <- seq(min(match.data.csv.win$diferencia), max(match.data.csv.win$diferencia), length.out = 16)
ggplot(match.data.csv.win,aes(diferencia))+
geom_histogram(breaks=bin)+
theme(legend.position="left")+
labs(x = "goles", y = "Frecuencia")
mean(match.data.csv.win$diferencia)
#Paso 1 Panteamiento de hipotesis
# h0 el local ganara por diferencia de 1 gol
# h1 el local no ganara por diferencia de 1 gol
hip <- 1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el local ganara por diferencia de 1 gol
# h1 el local no ganara por diferencia de 1 gol
hip <- 3
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
#Paso 1 Panteamiento de hipotesis
# h0 el local ganara por diferencia de 1 gol
# h1 el local no ganara por diferencia de 1 gol
hip <- -1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el local ganara por diferencia de 1 gol
# h1 el local no ganara por diferencia de 1 gol
hip <- 2
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
#Paso 1 Panteamiento de hipotesis
# h0 el local ganara por diferencia de 1 gol
# h1 el local no ganara por diferencia de 1 gol
hip <- 0
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
#Paso 1 Panteamiento de hipotesis
# h0 el local ganara por diferencia de 1 gol
# h1 el local no ganara por diferencia de 1 gol
hip <- -1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = F)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
##################################################################
Ym[100]
places <- which(Ym[100]==format(scores$date, "%Y-%m"))
places
eval <- match.data.csv.win[places,]
bin <- seq(min(match.data.csv.win$diferencia), max(match.data.csv.win$diferencia), length.out = 16)
ggplot(match.data.csv.win,aes(diferencia))+
geom_histogram(breaks=bin)+
theme(legend.position="left")+
labs(x = "goles", y = "Frecuencia")
mean(match.data.csv.win$diferencia)
#Paso 1 Panteamiento de hipotesis
# h0 el local pierda por diferencia de 1 gol o mas
# h1 el local no pierda porr diferencia de 1 gol o mas
hip <- -1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
##################################################################
Ym[100]
places <- which(Ym[100]==format(scores$date, "%Y-%m"))
places
eval <- match.data.csv.win[places,]
View(eval)
View(match.data.csv.win)
mean(match.data.csv.win$diferencia)
Ym[100]
#Paso 1 Panteamiento de hipotesis
# h0 el local pierda por diferencia de 1 gol o mas
# h1 el local no pierda por diferencia de 1 gol o mas
hip <- -1
valores <- eval$diferencia
#Paso 2 Calcular estadistico de prueba
(media <-mean(valores))
(ds <- sd(valores))
(n <- length(valores))
(t <- (media - hip)/(ds/sqrt(n)))
(gl <- n-1)
l
#Paso 3: Calcular P value
pvalue <- pt(t,df = gl, lower.tail = T)
pvalue
test <- t.test(x=valores, alternative = 'less', mu=hip)
test$p.value
test
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
